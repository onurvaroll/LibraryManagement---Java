
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.time.Instant;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author berka
 */
public class UserDashboard extends javax.swing.JFrame {

    Session session = Session.getInstance();
    Factory factory = new Factory();
    int selectedRow;
    int selectedRow2;
    /**
     * Creates new form UserDashboard
     */
    public UserDashboard() {
        initComponents();
        GetBooksAndWrite();
        GetUserBookings();
        GetNotifies();
        username.setText(session.name);
        rank.setText(session.rank);
    }
    
    void GetBooksAndWrite(){
        DefaultTableModel model = (DefaultTableModel)booksTable.getModel();
        model.setRowCount(0);
        
        String query = ("select * from BOOKS");
        
        try{
            
            DatabaseConnector dbConnection = DatabaseConnector.getInstance();
            Connection connection = dbConnection.getConnection();
            
            Statement stm = connection.createStatement();
            ResultSet ts = stm.executeQuery(query);
            
            while(ts.next()){
                String bookid = ts.getString("BOOK_ID");
                String category = ts.getString("CATEGORY");
                String bookname = ts.getString("NAME");
                String author = ts.getString("AUTHOR");
                String booked;
                
                if(ts.getInt("BOOKED") == 0){
                    booked = "Available";
                } else if(ts.getInt("BOOKED") == 1){
                    booked = "Not Available";
                } else {
                    booked = "Hidden";
                }
                
                String end_date = ts.getString("BOOK_END");
                
                model.addRow(new Object[] {bookid, category, bookname, author, booked, end_date});
            }
            
            stm.close();
            ts.close();
            
        } catch (Exception e){
            
        }
    }
    
        
    void GetUserBookings(){
        DefaultTableModel model = (DefaultTableModel)bookingTable.getModel();
        model.setRowCount(0);
        
        String query = ("SELECT * FROM bookings WHERE STUDENT_ID = '" + session.id + "';");
        
        try{
            
            DatabaseConnector dbConnection = DatabaseConnector.getInstance();
            Connection connection = dbConnection.getConnection();
            
            Statement stm = connection.createStatement();
            ResultSet ts = stm.executeQuery(query);
            
            while(ts.next()){

                String bookname = ts.getString("BOOK_NAME");                
                String end_date = ts.getString("END_DATE");
                
                model.addRow(new Object[] {bookname, end_date});
            }
            
            stm.close();
            ts.close();
            
        } catch (Exception e){
            
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        booksTable = new javax.swing.JTable();
        searchInput = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        bookName = new javax.swing.JLabel();
        author = new javax.swing.JLabel();
        availability = new javax.swing.JLabel();
        endDate = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        notifyTable = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        bookingTable = new javax.swing.JTable();
        selected = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        endDateInput = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        rank = new javax.swing.JLabel();
        username = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        booksTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "CATEGORY", "NAME", "AUTHOR", "AVAILABLE", "END DATE"
            }
        ));
        booksTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                booksTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(booksTable);

        jButton1.setText("SEARCH");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("BOOK NAME");

        jLabel2.setText("AUTHOR");

        jLabel3.setText("END DATE");

        jLabel4.setText("AVAILABILITY");

        bookName.setText("______________");

        author.setText("______________");

        availability.setText("______________");

        endDate.setText("______________");

        notifyTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "NOTIFICATIONS"
            }
        ));
        jScrollPane2.setViewportView(notifyTable);
        if (notifyTable.getColumnModel().getColumnCount() > 0) {
            notifyTable.getColumnModel().getColumn(0).setMinWidth(50);
            notifyTable.getColumnModel().getColumn(0).setPreferredWidth(15);
            notifyTable.getColumnModel().getColumn(0).setMaxWidth(50);
        }

        jButton2.setText("SELECT AND TAKE THIS BOOK");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel9.setText("BOOKS");

        bookingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "BOOK NAME", "END DATE"
            }
        ));
        bookingTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bookingTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(bookingTable);
        if (bookingTable.getColumnModel().getColumnCount() > 0) {
            bookingTable.getColumnModel().getColumn(0).setPreferredWidth(250);
        }

        selected.setText("MY BOOKS");

        jButton3.setText("GIVE BACK");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("BACK");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel5.setText("END DATE");

        endDateInput.setText("01.01.2024");

        jButton5.setText("BOOKS");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel6.setText("name:");

        rank.setText("Teacher");

        username.setText("Nurettin Berkay Demirkol");

        jLabel12.setText("rank:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel9)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(searchInput, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1)
                        .addGap(104, 104, 104)
                        .addComponent(jButton5))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 597, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(bookName)
                            .addComponent(author)
                            .addComponent(jLabel2)
                            .addComponent(availability)
                            .addComponent(endDate)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(selected)
                            .addComponent(jButton3)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(endDateInput, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel12)
                                .addGap(18, 18, 18)
                                .addComponent(rank, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton4)
                                .addGap(16, 16, 16))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jButton5)
                    .addComponent(jLabel6)
                    .addComponent(username)
                    .addComponent(jButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(rank)
                        .addComponent(jLabel12)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bookName)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(author)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(availability)
                        .addGap(26, 26, 26)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(endDate)
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jLabel5)
                            .addComponent(endDateInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(selected)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(jButton3))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(72, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void booksTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_booksTableMouseClicked
        bookName.setText("");
        author.setText("");
        availability.setText("");
        endDate.setText("");
        
        selectedRow = booksTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel)booksTable.getModel();
        bookName.setText(model.getValueAt(selectedRow, 2).toString());
        author.setText(model.getValueAt(selectedRow, 3).toString());
        availability.setText(model.getValueAt(selectedRow, 4).toString());
        endDate.setText(model.getValueAt(selectedRow, 5).toString());
    }//GEN-LAST:event_booksTableMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String searchBookName = searchInput.getText();
        SearchBook(searchBookName);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        GetBooksAndWrite();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
        String querybook = ("SELECT * FROM BOOKS WHERE NAME='"+ bookName.getText() +"';");
        String query = ("INSERT INTO BOOKINGS(BOOK_NAME, STUDENT_ID, START_DATE, END_DATE) VALUES ('" + bookName.getText() + "','" + session.id + "','" + "01.01.2022" + "','" + endDateInput.getText() +  "');");
        String query2 = ("UPDATE BOOKS SET BOOK_END='" + endDateInput.getText() + "' WHERE NAME='" + bookName.getText() + "';");
        
        try{
            
            DatabaseConnector dbConnection = DatabaseConnector.getInstance();
            Connection connection = dbConnection.getConnection();
            
            Statement stm = connection.createStatement();
            
            ResultSet tsFound = stm.executeQuery(querybook);
            
            while(tsFound.next()){
                if(tsFound.getInt("BOOKED") == 0){
                    
                    int ts = stm.executeUpdate(query);
                    int ts2 = stm.executeUpdate(query2);

                    //STATE SETTINGS
                    Book book = factory.createBook();
                    new ObserverNotice(book);
                    book.name = bookName.getText();
                    IState taken = new StateTaken();
                    taken.doAction(book, endDateInput.getText());
                    book.writeState(endDateInput.getText());
                    GetNotifies();

                }
                GetBooksAndWrite();
                GetUserBookings();
            }

            stm.close();
            
        } catch (Exception e){
            
        }
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void bookingTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bookingTableMouseClicked
        selectedRow2 = bookingTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel)bookingTable.getModel();
        GetUserBookings();
    }//GEN-LAST:event_bookingTableMouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        DefaultTableModel model = (DefaultTableModel)bookingTable.getModel();
        
        String query = ("DELETE FROM BOOKINGS WHERE BOOK_NAME = '" + model.getValueAt(selectedRow2, 0).toString() + "';");
        String query2 = ("UPDATE BOOKS SET BOOK_END='not taken' WHERE NAME='" + model.getValueAt(selectedRow2, 0).toString() + "';");
        
        try{
            
            DatabaseConnector dbConnection = DatabaseConnector.getInstance();
            Connection connection = dbConnection.getConnection();
            
            Statement stm = connection.createStatement();
            int ts = stm.executeUpdate(query);
            int ts2 = stm.executeUpdate(query2);
            
            //STATE SETTINGS
            Book book = factory.createBook();
            new ObserverNotice(book);
            book.name = bookName.getText();
            IState available = new StateAvailable();
            available.doAction(book, endDateInput.getText());
            book.writeState(endDateInput.getText());
            GetNotifies();
            GetBooksAndWrite();
            
            stm.close();
            GetUserBookings();
        } catch (Exception e){
            
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        session.logout();
        StartPage st = new StartPage();
        st.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton4ActionPerformed
    
    
    void GetNotifies(){
        DefaultTableModel model = (DefaultTableModel)notifyTable.getModel();
        model.setRowCount(0);
     
        String query = ("select * from NOTIFIES ORDER BY ID DESC;");
        
        try{
            
            DatabaseConnector dbConnection = DatabaseConnector.getInstance();
            Connection connection = dbConnection.getConnection();
            
            Statement stm = connection.createStatement();
            ResultSet ts = stm.executeQuery(query);
            
            while(ts.next()){
                String notify = ts.getString("notifies");
                String rank = ts.getString("rank");
                if(rank.equals("Admin")){
                    model.addRow(new Object[] {"!", notify});
                }
                else{
                    model.addRow(new Object[] {"", notify});
                }
            }
            
            stm.close();
            ts.close();
            
        } catch (Exception e){
            
        }
    }
  
    
    void SearchBook(String BookName){
        DefaultTableModel model = (DefaultTableModel)booksTable.getModel();
        model.setRowCount(0);
     
        String query = ("select * from BOOKS where NAME='" + BookName + "';");
        
        try{
            
            DatabaseConnector dbConnection = DatabaseConnector.getInstance();
            Connection connection = dbConnection.getConnection();
            
            Statement stm = connection.createStatement();
            ResultSet ts = stm.executeQuery(query);
            
            while(ts.next()){
                String bookid = ts.getString("BOOK_ID");
                String category = ts.getString("CATEGORY");
                String bookname = ts.getString("NAME");
                String booked;

                if(ts.getInt("BOOKED") == 0){
                    booked = "Available";
                } else if(ts.getInt("BOOKED") == 1){
                    booked = "Not Available";
                } else {
                    booked = "Hidden";
                }
                
                String end_date = ts.getString("BOOK_END");
                
                model.addRow(new Object[] {bookid, category, bookname, booked, end_date});
            }
            
            stm.close();
            ts.close();
            
        } catch (Exception e){
            
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserDashboard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel author;
    private javax.swing.JLabel availability;
    private javax.swing.JLabel bookName;
    private javax.swing.JTable bookingTable;
    private javax.swing.JTable booksTable;
    private javax.swing.JLabel endDate;
    private javax.swing.JTextField endDateInput;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable notifyTable;
    private javax.swing.JLabel rank;
    private javax.swing.JTextField searchInput;
    private javax.swing.JLabel selected;
    private javax.swing.JLabel username;
    // End of variables declaration//GEN-END:variables
}
